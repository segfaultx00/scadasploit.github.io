<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SCADAsploit</title>
    <link>localhost/tags/scadasploit/</link>
    <description>Recent content on SCADAsploit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 22 Apr 2022 15:09:35 +0200</lastBuildDate><atom:link href="localhost/tags/scadasploit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SCADAsploit module: Modbus Payload Transfer</title>
      <link>localhost/posts/2022/04/scadasploit-module-modbus-payload-transfer/</link>
      <pubDate>Fri, 22 Apr 2022 15:09:35 +0200</pubDate>
      
      <guid>localhost/posts/2022/04/scadasploit-module-modbus-payload-transfer/</guid>
      <description>The second module we are going to explore is called &amp;ldquo;Modbus Payload Transfer&amp;rdquo; and belongs to the auxiliary category.
What is it for The &amp;ldquo;Modbus Payload Transfer&amp;rdquo; module is a script that allows you to store and retrieve a payload/shellcode in the &amp;ldquo;holding registers&amp;rdquo; of a PLC via the Modbus TCP protocol. There are many PLCs exposed to the Internet, with this module it is possible to exploit their memory to upload a payload (shellcode/malware) so that it can be recovered at a later time.</description>
    </item>
    
    <item>
      <title>SCADAsploit module: Modbus Scan</title>
      <link>localhost/posts/2022/04/scadasploit-module-modbus-scan/</link>
      <pubDate>Sun, 17 Apr 2022 15:09:35 +0200</pubDate>
      
      <guid>localhost/posts/2022/04/scadasploit-module-modbus-scan/</guid>
      <description>Let&amp;rsquo;s get to know SCADAsploit a little better starting from one of the auxiliary modules present: Modbus Scan.
Position ourselves in the folder where we installed SCADAsploit and start it using the command $ ./scadasploit.py. Following the same approach philosophy of Metasploit, we can search for all modules that contain a keyword using the search &amp;lt;keyword&amp;gt; command or display the complete list of modules present with the show modules command.</description>
    </item>
    
    <item>
      <title>SCADAsploit Framework</title>
      <link>localhost/posts/2022/04/scadasploit-framework/</link>
      <pubDate>Thu, 14 Apr 2022 15:09:35 +0200</pubDate>
      
      <guid>localhost/posts/2022/04/scadasploit-framework/</guid>
      <description>This section is dedicated to SCADAsploit, a framework I&amp;rsquo;m working on dedicated to OT/ICS penetration testing. You ask yourself: &amp;ldquo;But isn&amp;rsquo;t Metasploit already doing this?&amp;rdquo;. Certain! So what is the need to create a new tool like this? I try to give some answers:
framework exclusively dedicated to vulnerabilities of SCADA, PLC and other ICS devices written in Python, both the core of the framework and the modules &amp;ldquo;Metasploit like&amp;rdquo; interface greater focus on the installed PLC fleet, especially in Europe.</description>
    </item>
    
  </channel>
</rss>
